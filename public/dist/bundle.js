(()=>{"use strict";function e(e,t,n){const r=n.value;return{configurable:!0,enumerable:!1,get(){return r.bind(this)}}}var t;!function(e){e[e.Active=0]="Active",e[e.Finished=1]="Finished"}(t||(t={}));class n{constructor(e,t,n,r){this.title=e,this.description=t,this.numOfPeople=n,this.status=r}}class r{constructor(){this.listeners=[]}addListeners(e){this.listeners.push(e)}}class s extends r{constructor(){super(),this.projects=[]}static getInstance(){return this.instance||(this.instance=new s),this.instance}addProject(e,t,r,s){const i=new n(e,t,r,s);this.projects.push(i),this.updateListeners()}changeStatus(e,t){const n=this.projects.find((t=>t.title===e));n&&(n.status=t),this.updateListeners()}updateListeners(){for(let e of this.listeners)e(this.projects.slice())}}const i=s.getInstance();function l(e){let t=!0;return e.required&&(t=t&&0!==e.value.toString().trim().length),null!=e.minLength&&"string"==typeof e.value&&(t=t&&e.value.trim().length>e.minLength),null!=e.maxLength&&"string"==typeof e.value&&(t=t&&e.value.trim().length<e.maxLength),null!=e.min&&"number"==typeof e.value&&(t=t&&e.value<e.min),null!=e.max&&"number"==typeof e.value&&(t=t&&e.value>e.max),t}class o{constructor(e,t,n,r){this.inputTemplate=document.getElementById(e),this.hostElement=document.getElementById(t);const s=document.importNode(this.inputTemplate.content,!0);this.element=s.firstElementChild,r&&(this.element.id=r),this.attach(n)}attach(e){this.hostElement.insertAdjacentElement(e?"afterbegin":"beforeend",this.element)}}class a extends o{constructor(){super("project-input","app",!0,"user-input"),this.renderContent(),this.configure()}clearInputs(){this.titleInputElement.value="",this.descriptionInputElement.value="",this.peopleInputElement.value=""}validateInputs(){const e={title:this.titleInputElement.value,desc:this.descriptionInputElement.value,people:this.peopleInputElement.value},t={value:e.desc,required:!0,minLength:5},n={value:e.people,required:!0,max:5,min:0};return l({value:e.title,required:!0})&&l(t)&&l(n)?[e.title,e.desc,+e.people]:void alert("Wrong Input")}submitHandler(e){e.preventDefault();const n=this.validateInputs();if(Array.isArray(n)){const[e,r,s]=n;i.addProject(e,r,s,t.Active),this.clearInputs()}}configure(){this.element.addEventListener("submit",this.submitHandler)}renderContent(){this.titleInputElement=this.element.querySelector("#title"),this.descriptionInputElement=this.element.querySelector("#description"),this.peopleInputElement=this.element.querySelector("#people")}}!function(e,t,n,r){var s,i=arguments.length,l=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,t,n,r);else for(var o=e.length-1;o>=0;o--)(s=e[o])&&(l=(i<3?s(l):i>3?s(t,n,l):s(t,n))||l);i>3&&l&&Object.defineProperty(t,n,l)}([e],a.prototype,"submitHandler",null);class c extends o{get personText(){const{numOfPeople:e}=this.project;return 1===e?"1 person":`${e} persons`}constructor(e,t){super("single-project",e,!0,t.title),this.project=t,this.configure(),this.renderContent()}dragStartHandler(e){e.dataTransfer.setData("text/plain",this.project.title),e.dataTransfer.effectAllowed="move"}dragEndHandler(e){}configure(){this.element.addEventListener("dragstart",this.dragStartHandler),this.element.addEventListener("dragend",this.dragEndHandler)}renderContent(){this.element.querySelector("h2").textContent=this.project.title,this.element.querySelector("h3").textContent=this.personText+" assigned",this.element.querySelector("p").textContent=this.project.description}}!function(e,t,n,r){var s,i=arguments.length,l=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,t,n,r);else for(var o=e.length-1;o>=0;o--)(s=e[o])&&(l=(i<3?s(l):i>3?s(t,n,l):s(t,n))||l);i>3&&l&&Object.defineProperty(t,n,l)}([e],c.prototype,"dragStartHandler",null);var d=function(e,t,n,r){var s,i=arguments.length,l=i<3?t:null===r?r=Object.getOwnPropertyDescriptor(t,n):r;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,t,n,r);else for(var o=e.length-1;o>=0;o--)(s=e[o])&&(l=(i<3?s(l):i>3?s(t,n,l):s(t,n))||l);return i>3&&l&&Object.defineProperty(t,n,l),l};class u extends o{constructor(e){super("project-list","app",!1,`${e}-projects`),this.type=e,this.assignedProjects=[],this.configure(),this.renderContent()}dragOverHandler(e){e.dataTransfer&&"text/plain"===e.dataTransfer.types[0]&&(e.preventDefault(),this.element.querySelector("ul").classList.add("droppable"))}dragLeaveHandler(e){this.element.querySelector("ul").classList.remove("droppable")}dropHandler(e){i.changeStatus(e.dataTransfer.getData("text/plain"),"active"==this.type?t.Active:t.Finished)}configure(){this.element.addEventListener("dragover",this.dragOverHandler),this.element.addEventListener("dragleave",this.dragLeaveHandler),this.element.addEventListener("drop",this.dropHandler),i.addListeners((e=>{const n=e.filter((e=>"active"===this.type?e.status===t.Active:e.status===t.Finished));this.assignedProjects=n,this.renderProjects()}))}renderContent(){const e=`${this.type}-projects-list`;this.element.querySelector("ul").id=e,this.element.querySelector("h2").textContent=`${this.type.toUpperCase()} PROJECTS`}renderProjects(){document.getElementById(`${this.type}-projects-list`).innerHTML="";for(const e of this.assignedProjects)new c(this.element.querySelector("ul").id,e)}}d([e],u.prototype,"dragOverHandler",null),d([e],u.prototype,"dragLeaveHandler",null),d([e],u.prototype,"dropHandler",null),new a,new u("active"),new u("finished")})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,